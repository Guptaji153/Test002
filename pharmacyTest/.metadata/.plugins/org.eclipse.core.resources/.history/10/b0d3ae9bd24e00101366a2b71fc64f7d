package com.java.test.dao.impl;

import java.sql.Timestamp;
import java.util.Random;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.java.test.dao.PharmacyDao;
import com.java.test.model.Pharmacy;
import com.java.test.model.PharmacyOTP;
import com.java.test.model.Purpose;
import com.java.test.model.Status;
import com.java.test.util.MailSend;
import com.java.test.util.SessionHelper;

public class PharmacyDaoImpl implements PharmacyDao {

    Session session;

    public int generateOtp() {
        return 100000 + new Random().nextInt(900000);
    }

    public static String getNextPharmacyId(Session session) {
        String prefix = "PHM";
        String hql = "select max(pharmacyId) from Pharmacy";
        String maxId = (String) session.createQuery(hql).uniqueResult();
        if (maxId == null) {
            return prefix + "001";
        }
        int id = Integer.parseInt(maxId.substring(prefix.length()));
        id++;
        return String.format("%s%03d", prefix, id);
    }

    @Override
    public String addPharmacy(Pharmacy pharmacy) {
        session = SessionHelper.getConnection().openSession();
        Transaction trans = session.beginTransaction();

        String nextId = getNextPharmacyId(session);
        pharmacy.setPharmacyId(nextId);
        pharmacy.setStatus("Pending");
        session.save(pharmacy);
        trans.commit();

        int code = generateOtp();
        Timestamp now = new Timestamp(System.currentTimeMillis());
        Timestamp expiry = new Timestamp(now.getTime() + 10 * 60 * 1000);

        PharmacyOTP otp = new PharmacyOTP();
        otp.setOtpCode(String.valueOf(code));
        otp.setStatus(Status.PENDING);
        otp.setPurpose(Purpose.REGISTER);
        otp.setPharmacyId(pharmacy.getPharmacyId());
        otp.setCreatedAt(now);
        otp.setExpiresAt(expiry);

        trans = session.beginTransaction();
        session.save(otp);
        trans.commit();

        String subject = "Hi " + pharmacy.getPharmacyName() + ", your account is created";
        String body = "Your OTP Code is " + code + ". Please use this to set your password.";
        MailSend.sendInfo(pharmacy.getEmail(), subject, body);

        return "Pharmacy record added and OTP sent via email.";
    }

    @Override
    public boolean verifyOtp(String pharmacyId, String otpCode) {
        session = SessionHelper.getConnection().openSession();

        String hql = "from PharmacyOTP where pharmacyId = :pharmacyId and otpCode = :otp and status = :status";
        Query query = session.createQuery(hql);
        query.setParameter("pharmacyId", pharmacyId);
        query.setParameter("otp", otpCode);
        query.setParameter("status", Status.PENDING);

        PharmacyOTP objOtp = (PharmacyOTP) query.uniqueResult();

        if (objOtp != null) {
            // Update OTP status to VERIFIED
            Transaction trans = session.beginTransaction();
            objOtp.setStatus(Status.VERIFIED);
            session.update(objOtp);
            trans.commit();
            return true;
        }

        return false;
    }

    @Override
    public String updatePassword(String email, String pwd) {
        session = SessionHelper.getConnection().openSession();
        Transaction tx = null;

        String hql = "from Pharmacy where email = :email";
        Query query = session.createQuery(hql);
        query.setParameter("email", email);
        Pharmacy pharmacy = (Pharmacy) query.uniqueResult();

        if (pharmacy != null) {
            tx = session.beginTransaction();
            pharmacy.setPassword(pwd);
            pharmacy.setStatus("Active"); // activate account after setting password
            session.update(pharmacy);

            // Delete OTP entries for this pharmacy (optional cleanup)
            Query otpQuery = session.createQuery("from PharmacyOTP where pharmacyId = :pharmacyId");
            otpQuery.setParameter("pharmacyId", pharmacy.getPharmacyId());
            for (Object o : otpQuery.list()) {
                session.delete(o);
            }

            tx.commit();
            return "Pharmacy Updated Successfully";
        } else {
            return "No Pharmacy Found for Update";
        }
    }

    public Pharmacy getPharmacyByEmail(String email) {
        session = SessionHelper.getConnection().openSession();
        Query query = session.createQuery("from Pharmacy where email = :email");
        query.setParameter("email", email);
        return (Pharmacy) query.uniqueResult();
    }

	@Override
	public String verifyOtp(String email, int otp) {
		// TODO Auto-generated method stub
		return null;
	}


}
