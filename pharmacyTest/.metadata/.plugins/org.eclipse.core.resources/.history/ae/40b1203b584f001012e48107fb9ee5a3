package com.java.test.dao.impl;

import java.sql.Timestamp;
import java.util.Random;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.java.test.dao.PharmacyDao;
import com.java.test.model.Pharmacy;
import com.java.test.model.PharmacyOTP;
import com.java.test.model.Purpose;
import com.java.test.model.Status;
import com.java.test.util.MailSend;
import com.java.test.util.SessionHelper;

public class PharmacyDaoImpl implements PharmacyDao {

    private Session session;

    // Generate 6-digit OTP
    public int generateOtp() {
        return 100000 + new Random().nextInt(900000);
    }

    // Generate next pharmacyId
    public static String getNextPharmacyId(Session session) {
        String prefix = "PHM";
        String hql = "select max(pharmacyId) from Pharmacy";
        String maxId = (String) session.createQuery(hql).uniqueResult();
        if (maxId == null) {
            return prefix + "001";
        }
        int id = Integer.parseInt(maxId.substring(prefix.length()));
        id++;
        return String.format("%s%03d", prefix, id);
    }

    @Override
    public String addPharmacy(Pharmacy pharmacy) {
        session = SessionHelper.getConnection().openSession();
        Transaction trans = session.beginTransaction();

        String nextId = getNextPharmacyId(session);
        pharmacy.setPharmacyId(nextId);
        pharmacy.setStatus("Pending");  // set status pending at registration
        session.save(pharmacy);
        trans.commit();

        int code = generateOtp();
        Timestamp now = new Timestamp(System.currentTimeMillis());
        Timestamp expiry = new Timestamp(now.getTime() + 10 * 60 * 1000);  // 10 minutes expiry

        PharmacyOTP otp = new PharmacyOTP();
        otp.setOtpCode(String.valueOf(code));
        otp.setStatus(Status.PENDING);
        otp.setPurpose(Purpose.REGISTER);
        otp.setPharmacyId(pharmacy.getPharmacyId());
        otp.setCreatedAt(now);
        otp.setExpiresAt(expiry);

        trans = session.beginTransaction();
        session.save(otp);
        trans.commit();

        String subject = "Hi " + pharmacy.getPharmacyName() + ", your OTP code";
        String body = "Your OTP Code is " + code + ". Please use this to verify your account and set your password.";
        MailSend.sendInfo(pharmacy.getEmail(), subject, body);

        session.close();
        return "Pharmacy record added and OTP sent via email.";
    }

    // Verify OTP and activate account
    @Override
    public String verifyOtpAndActivateAccount(String email, int otpCode) {
        session = SessionHelper.getConnection().openSession();
        Transaction tx = null;

        try {
            // Get Pharmacy by email
            Query pharmacyQuery = session.createQuery("from Pharmacy where email = :email");
            pharmacyQuery.setParameter("email", email);
            Pharmacy pharmacy = (Pharmacy) pharmacyQuery.uniqueResult();

            if (pharmacy == null) {
                return "No pharmacy found with the provided email.";
            }

            // Get OTP for this pharmacyId, pending status
            Query otpQuery = session.createQuery("from PharmacyOTP where pharmacyId = :pharmacyId and otpCode = :otp and status = :status");
            otpQuery.setParameter("pharmacyId", pharmacy.getPharmacyId());
            otpQuery.setParameter("otp", String.valueOf(otpCode));
            otpQuery.setParameter("status", Status.PENDING);
            PharmacyOTP otp = (PharmacyOTP) otpQuery.uniqueResult();

            if (otp == null) {
                return "Invalid or expired OTP.";
            }

            // Mark OTP as verified
            otp.setStatus(Status.VERIFIED);

            tx = session.beginTransaction();
            session.update(otp);

            // Activate pharmacy account
            pharmacy.setStatus("Active");
            session.update(pharmacy);

            tx.commit();

            // Optionally delete OTP record (or keep for audit)
            tx = session.beginTransaction();
            session.delete(otp);
            tx.commit();

            return "OTP verified successfully. You can now reset your password.";

        } catch (Exception e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
            return "Exception during OTP verification: " + e.getMessage();
        } finally {
            session.close();
        }
    }

    @Override
    public boolean validatePassword(String email, String password) {
        session = SessionHelper.getConnection().openSession();
        try {
            Query query = session.createQuery("from Pharmacy where email = :email");
            query.setParameter("email", email);
            Pharmacy pharmacy = (Pharmacy) query.uniqueResult();

            return pharmacy != null && pharmacy.getPassword() != null && pharmacy.getPassword().equals(password);
        } finally {
            session.close();
        }
    }

    @Override
    public String updatePassword(String email, String pwd) {
        session = SessionHelper.getConnection().openSession();
        Transaction tx = null;
        try {
            Query query = session.createQuery("from Pharmacy where email = :email");
            query.setParameter("email", email);
            Pharmacy pharmacy = (Pharmacy) query.uniqueResult();

            if (pharmacy != null) {
                tx = session.beginTransaction();
                pharmacy.setPassword(pwd);
                session.update(pharmacy);
                tx.commit();
                return "Pharmacy Updated Successfully";
            } else {
                return "No Pharmacy Found for Update";
            }
        } catch (Exception e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
            return "Exception during password update: " + e.getMessage();
        } finally {
            session.close();
        }
    }

    // Removed generatePassword(), validateTempPassword(), getAlphaNumericString() methods as per your request
}
